import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# Download Apple stock data
df = yf.download('AAPL', start='2020-01-01', end='2025-01-01')

# Reset index to get Date as a column
df.reset_index(inplace=True)

# Drop missing values
df.dropna(inplace=True)

# Feature Engineering: Create Moving Averages
df['50_MA'] = df['Close'].rolling(window=50).mean()
df['200_MA'] = df['Close'].rolling(window=200).mean()

# Drop NA rows caused by moving averages
df.dropna(inplace=True)

# Define features (X) and target variable (y)
X = df[['Open', 'High', 'Low', 'Volume', '50_MA', '200_MA']]
y = df['Close']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize features
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Plot closing price over time
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Close'], label="Closing Price", color='blue')
plt.xlabel("Date")
plt.ylabel("Stock Price (USD)")
plt.title("Apple (AAPL) Stock Prices")
plt.legend()
plt.grid()
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Feature Correlation Heatmap")
plt.show()

# -------------------------------
# Linear Regression Model
# -------------------------------
lm = LinearRegression()
lm.fit(X_train_scaled, y_train)

# Predict and evaluate
y_pred_lm = lm.predict(X_test_scaled)
print("Linear Regression R² Score:", r2_score(y_test, y_pred_lm))
print("Linear Regression RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_lm)))

# -------------------------------
# Random Forest Regressor (optional advanced model)
# -------------------------------
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

# Predict and evaluate
y_pred_rf = rf.predict(X_test_scaled)
print("Random Forest R² Score:", r2_score(y_test, y_pred_rf))
print("Random Forest RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf)))

# Predict future stock price (based on latest available data)
latest_data = X.iloc[-1].values.reshape(1, -1)
latest_data_scaled = scaler.transform(latest_data)
future_price = rf.predict(latest_data_scaled)
print("Predicted Future Stock Price (Random Forest):", future_price[0])
